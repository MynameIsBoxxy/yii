Простраство имен (namespace) добавлен в php с версии 5.3. Если во время разработки, используются одинаковые названия классов, то чтобы не было конфликта имен нужно использовать namespace. В каждом файле с классом определяем простраство имен. Например:
namespace name1;
namespace name2;

Теперь можно обращаться к классамс помощью 
$o = new name1\className();
$b = new name2\className();

Или можно сначала подключить с помощью use.
use name1\className;
use name2\className as clName;

Во втором подключении используются псевдоним, потому что оба класса имеют одинаковые названия и снова был бы конфликт имен.
Используем:
$o = new className();
$b = new clName();

-------------------------------

Пакетный менеджер Composer облегчает разработку больших проектов, когда в ней учавствуют много разработчиков. Composer все используемые пакеты помещает в папку vendors. С помощью git эту папку можно игнорировать и папки с пакетами не будут попадать в репозиторий. Другой пользователь скачивает проект с репозитория без папки vendors и с помощью Composer устанавливает все пакеты, используемые в проекте. В Composer используется версии используемыех пакетов, а менеджер зависимостей указывает от каких пакетов зависит приложение. 
Команды для установки композера можно найти на https://getcomposer.org/download/. Их нужно вводить в папку с проектом

php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"

После в папке появится файл composer.phar.
Пример добавления пакета в проект:
php composer.phar require intervention/image

После установки появляется файлы composer.json, composer.lock и папка vendor. В composer.json будет хранится конфигурация проекта. Пакет intervention/image был добавлен в список зависимостей. Файл composer.json выглядит так:

{
    "require": {
        "intervention/image": "^2.5"
    }
}

В папке vendor сохраняются файлы скачанных пакетов. В файле composer.lock указаны все установленные пакеты. При установки intervention/image были установлены другие пакеты от которых он зависит. В нашем composer.json указан только intervention/image, в composer.lock все пакеты ( intervention/image + все остальные, от которых он зависит )

--------------------------

По номерам версий можно узнать какие изменения были внесены в проект, сохранена ли обратная совместимость. Если обновления ломают работу приложения, то значит обновление сломало обратную совместимость. С помощью команды git tag можно отменить версией свой проект. 
Значение цифр в версиях. Версия 3.2.1
Первая цифра (3) это мажорная версия. Это серьезное, большое обновление. Скорее всего обратная совместимость будет сломана. 
Вторая цифра (2) это минорная версия. Изменения не должны затрагивать обратную совместимость.
Третья цифра (1) это патч версия. Отвечает за исправление ошибок в программе.

Чтобы создать свой composer пакет нужно:
1) Оформить (настроить) пакет
2) Залить код в репозиторий
3) Создать и настроить пакет на Packagist (хранилище composer пакетов)
4) После всего можно использовать пакет 

-------------------------

Для создания composer пакет нужно выполнить действия:
1) установить git
2) установить composer
3) php composer.phar init. Это запустит генератор конфигурации. Заполняем данные, зависимости.

Чтобы научить composer добавлять наши файлы в автозагрузку классов нужно добавить в composer.json 
"autoload": {
    "psr-4":{
        "namespace":"путь к папке с файлами"
    }
}

Фиксируем все изменения в git репозитории. Потом чтобы добавить composer пакет на https://packagist.org/ нажимает Submit добавляем репозиторий с github , проверяем. Все, пакет опубликован. 
Чтобы пакет обновлялся при каждом push в удаленный репозиторий нужно действовать согласно инструкции на packagist.org. Инструкция из видео устарела.

ЧТобы добавить наш пакет в проект нужно ввести команду php composer.phar require sahahov/composer-editor-ex:1.1.0, предварительно установиви Composer.

При такой коменде composer require sahahov/composer-editor-ex версия пакета определяется автоматически. Можно указать версию. 
1) Точное соответсвите например 1.1.0
php composer.phar require sahahov/composer-editor-ex:1.1.0
2) Диапозоны. 
> 1.0.1 выше какой устанавливать
< 1.1.0 выше какой не устанавливать (самая высокая до нее)

php composer.phar require sahahov/composer-editor-ex:">1.1.0"

3) Последняя доступная 
1.1.*
php composer.phar require sahahov/composer-editor-ex:"1.1.*"

4) Тильда
~1.1.0

php composer.phar require sahahov/composer-editor-ex:"~1.0.0"
установится самая последня патч версия
php composer.phar require sahahov/composer-editor-ex:"~1.0"
установится самая последня минорная версия
5) с помощью ^
php composer.phar require sahahov/composer-editor-ex:"^1.0.0"
установит все версии патча и минорной версии.

Команда composer install считывает файл composer.json, находит зависимости и принимает решение какие версии установить. Устанавливает все пакеты в папку vendor и генерирует класс автозагрузки. После этого установленные версии будут записаны в файл composer.lock. В нем будет видно какие пакеты установлены. 
Если на момент запуска команды, файл composer.lock уже существует, это значит что кто то другой уже выполнил команду composer install. Файл composer.json будет проигнорирован. Команда composer install пройдется по файлу composer.lock и повторит все установки с указанными версиями. 

Команда composer update. Она не смотрит в composer.lock , а каждый раз считывает команду composer.json. Находит новые версии, устанавливает и перезаписывает файл composer.lock.
